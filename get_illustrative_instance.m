function [count,count_primary_su] = ...
	 get_illustrative_instance(core_list,ADJ,s,tar,...
				   shortest,backup,baseline,HEMP,NUM)

%function [] = get_illustrative_instance(core_list,adj_mtx,...
%					shortest,backup,baseline,gz)
%generate an instance of post attack, where primary and baseline
%failed, but backup survived
  N = size(ADJ,1);
  cond = 0;
  count = 0;
  count_primary_failed = 0;
  count_primary_su = 0;
  while count<NUM
    count = count+1;
    ADJ_post = ADJ;
    survived_nodes_indicator = zeros(1,size(core_list,1));
    %getting survival and failed nodes
    [survive_nodes failed_nodes count_survived count_failed] = ...
    generate_failures(core_list,HEMP,'gaussian');
    %fail_node_count = count_failed;
    %node failure
    ADJ_post(failed_nodes,:) = 0;
    ADJ_post(:,failed_nodes) = 0;
    
    survived_nodes_indicator(survive_nodes) = 1;
	
    if survived_nodes_indicator(s)==1&&...
       survived_nodes_indicator(tar)==1
      count_primary_su = count_primary_su+1;
      temp = calculate_backup_survive(ADJ_post,shortest);
      if temp==false %primary failed
	 count_primary_failed = count_primary_failed+1;
	 temp1 = calculate_backup_survive(ADJ_post,backup);
	 temp2 = calculate_backup_survive(ADJ_post,baseline);
	 if temp1==true && temp2==false %backup survived
	    %plot this figure
	    h = figure;
	    hold on;
	    %post attack background graph
	    for i=1:N
	      if sum(ADJ_post(i,:)==0)==N %node failure
		h(1) = plot(core_list(i,1),core_list(i,2),'r*');
	      else
		for j=i+1:N
		  if ADJ_post(i,j)~=0
		    plot([core_list(i,1) core_list(j,1)],...
			 [core_list(i,2) core_list(j,2)],'-sg');
		  end
		end
	      end
	    end
	    %pin point ground zero
	    h(2) = plot(HEMP.ground_zero(1),...
			 HEMP.ground_zero(2),...
			 'kh','linewidth',2);
	    %pair of interesting nodes
	    h(3) = plot([core_list(s,1) core_list(tar,1)],...
			[core_list(s,2) core_list(tar,2)],...
			 'ko','linewidth',2);
	    
	    %original shortest path
	    for i=1:length(shortest)-1
	      if survived_nodes_indicator(shortest(i))==0 ||...
		 survived_nodes_indicator(shortest(i+1))==0
		 plot([core_list(shortest(i),1),...
			       core_list(shortest(i+1),1)],...
			      [core_list(shortest(i),2),...
			       core_list(shortest(i+1),2)],...
			      '--k','linewidth',2);
		 mid_pt(1) = ...
		 0.5*(core_list(shortest(i),1)+...
		      core_list(shortest(i+1),1));
		 mid_pt(2) = ...
		 0.5*(core_list(shortest(i),2)+...
		      core_list(shortest(i+1),2));
		 h(5) = plot(mid_pt(1),mid_pt(2),...
			     'xk','linewidth',2);
	      else
		h(4) =  plot([core_list(shortest(i),1),...
			      core_list(shortest(i+1),1)],...
			     [core_list(shortest(i),2),...
			      core_list(shortest(i+1),2)],...
			     '-k','linewidth',2);
	      end
	    end

	    %baseline path
	    for i=1:length(baseline)-1
	      if survived_nodes_indicator(baseline(i))==0 ||...
		 survived_nodes_indicator(baseline(i+1))==0
		 plot([core_list(baseline(i),1),...
			       core_list(baseline(i+1),1)],...
			      [core_list(baseline(i),2),...
			       core_list(baseline(i+1),2)],...
			      '--b','linewidth',2);
		 mid_pt(1) = ...
		 0.5*(core_list(baseline(i),1)+...
		      core_list(baseline(i+1),1));
		 mid_pt(2) = ...
		 0.5*(core_list(baseline(i),2)+...
		      core_list(baseline(i+1),2));
		 h(7) = plot(mid_pt(1),mid_pt(2),...
			     'xk','linewidth',2);
	      else
		h(6) =  plot([core_list(baseline(i),1),...
			      core_list(baseline(i+1),1)],...
			     [core_list(baseline(i),2),...
			      core_list(baseline(i+1),2)],...
			     '-b','linewidth',2);
	      end
	    end
	    %survived backup path
	    for i=1:length(backup)-1
	      h(8) = plot([core_list(backup(i),1),...
			   core_list(backup(i+1),1)],...
			  [core_list(backup(i),2),...
			   core_list(backup(i+1),2)],...
			  '-.k','linewidth',2);
	    end
	    legend([h(1),h(2),h(3),h(4),h(6),h(8),h(5)],...
		   'failed nodes','ground zero',...
		   'a pair of AC nodes',...
		   'shortest path',...
		   '2nd shortest path (baseline)',...
		   'active proposed backup path',...
		   'the link is failed',...
		   'Location','southwest');
	    xlabel('longtitude','fontsize',18);
	    ylabel('latitude','fontsize',18);
	    title('Level-3 Graph, post attack',...
		  'fontsize',18);
	    set(gca,'fontsize',18);
	    set(h(2),'markers',10);
	    set(h(3),'markers',10);
	    break;
	 end
      end
    end
  end
