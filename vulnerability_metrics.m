function [isConnected largest_comp num_comp avg_shortest avg_mincut num_conn_pairwise] = ...
	 vulnerability_metrics(ADJ,index4post,ADJ_post,...
			       AC_node_post_adjusted,CC_node_post_adjusted,shortest_p,mincut_mtx,options)
%%%%%input%%%%%
%ADJ: NxN network graph with same number of nodes as GRAPH, 
%an adjacency matrix specifying connections between nodes
%
%index4post: post attack survived nodes index in the original ADJ
%
%ADJ_post: N'xN'network graph post attack, an adjacency matrix
%specifying connections between surviving nodes
%
%CC_node: node index to indicate CC nodes
%
%AC_node: node index to indicate AC nodes
%
%shortest_p: shortest path between original nodes
%
%%%%%%%%%%%%%%%%
%%%%%output%%%%%
%performance metrics for a given GRAPH post attack
%%%%%%%%%%%%%%%
%METRICS = struct;

%is it connected?
if strcmp('all',options)||ismember('isConnected',options)
  isConnected = isConnected(ADJ_post);
else
  isConnected = -1;
end
%largest connected component
[GC,gc_nodes] = giantComponent(ADJ_post);
largest_comp = length(gc_nodes);

%number of connected component
if strcmp('all',options)||ismember('numComp',options)
  num_comp = numConnComp(ADJ_post);
else
  num_comp = -1;
end

if strcmp('all',options)||ismember('mincut',options)
  %average min_cut for each pair
  avg_mincut_prior = 0;
  avg_mincut_post = 0;
  avg_shortest_prior = 0;
  avg_shortest_post = 0;
  for i=1:length(gc_nodes)-1
    for j=i+1:length(gc_nodes)
      temp_mincut = ...
      mincut_mtx(index4post(gc_nodes(i)),index4post(gc_nodes(j)));
      temp_dist = ...
      shortest_p(index4post(gc_nodes(i)),index4post(gc_nodes(j)));
      avg_mincut_prior = avg_mincut_prior+temp_mincut;
      avg_shortest_prior = avg_shortest_prior+temp_dist;
      [temp_mincut temp_dist] = get_mincut(GC,i,j);
      avg_mincut_post = avg_mincut_post+temp_mincut;
      avg_shortest_post = avg_shortest_post+temp_dist;
    end
  end
  avg_mincut_post = avg_mincut_post/length(gc_nodes);
  avg_mincut_prior = avg_mincut_prior/length(gc_nodes);
  avg_mincut = avg_mincut_prior - avg_mincut_post;
  avg_shortest_post = avg_shortest_post/length(gc_nodes);
  avg_shortest_prior = avg_shortest_prior/length(gc_nodes);
  if avg_shortest_post<avg_shortest_prior
    fprintf('post attack sp = %f, prior sp = %f\n',avg_shortest_post,avg_shortest_prior);
    error('post is less than prior shortest path, sth is wrong with calculation.');
  %else
  %  fprintf('avg shortest path diff in largest connected comp = %g\n',...
  %	  METRICS.avg_shortest_post - METRICS.avg_shortest_prior);
  end
  avg_shortest = avg_shortest_post-avg_shortest_prior;
else
  avg_mincut = -1;
  avg_shortest = -1;
end
%%%%%%%%%%%%%%%%%%%incorporated into get_mincut.m%%%%%%%%%
if strcmp('all',options)||ismember('minpath',options)&&~ismember('mincut',options)
  %average shortest path between each pair, in the largest connected component
  avg_shortest_prior = 0;
  avg_shortest_post = 0;
  for i=1:length(gc_nodes)-1
    [temp_dist_mtx(i,:)]=simpleDijkstra(GC,i);
  end
  for i=1:length(gc_nodes)-1
    for j=i+1:length(gc_nodes)
      temp_dist = shortest_p(index4post(gc_nodes(i)),index4post(gc_nodes(j)));
      avg_shortest_prior = avg_shortest_prior+temp_dist;
      temp_dist =temp_dist_mtx(i,j);
      avg_shortest_post = avg_shortest_post+temp_dist;
    end
  end
  avg_shortest_post = avg_shortest_post/length(gc_nodes);
  avg_shortest_prior = avg_shortest_prior/length(gc_nodes);
  avg_shortest = avg_shortest_post-avg_shortest_prior;
elseif ~ismember('minpath',options)
  avg_shortest = -1;
end
%{
for i=1:length(gc_nodes)-1
  for j=i+1:length(gc_nodes)
    temp_dist = shortest_p(index4post(gc_nodes(i)),index4post(gc_nodes(j)));
    avg_shortest_prior = avg_shortest_prior+temp_dist;
    [temp_dist,P]=dijkstra(GC,i,j);
    avg_shortest_post = avg_shortest_post+temp_dist;
  end
end
%}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


if strcmp('all',options)||ismember('beta',options)
  num_conn_pairwise = get_pairwise_conn(ADJ_post);
else
  num_conn_pairwise = [-1 -1];
end

